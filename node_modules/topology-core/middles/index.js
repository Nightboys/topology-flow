"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var rectangle_1 = require("./nodes/rectangle");
var circle_1 = require("./nodes/circle");
var triangle_1 = require("./nodes/triangle");
var diamond_1 = require("./nodes/diamond");
var arrow_1 = require("./nodes/arrow");
var text_1 = require("./nodes/text");
var line_1 = require("./nodes/line");
var triangle_anchor_1 = require("./nodes/triangle.anchor");
var arrow_anchor_1 = require("./nodes/arrow.anchor");
var line_anchor_1 = require("./nodes/line.anchor");
var circle_rect_1 = require("./nodes/circle.rect");
var triangle_rect_1 = require("./nodes/triangle.rect");
var diamond_rect_1 = require("./nodes/diamond.rect");
var arrow_rect_1 = require("./nodes/arrow.rect");
var line_rect_1 = require("./nodes/line.rect");
var line_2 = require("./lines/line");
var polyline_1 = require("./lines/polyline");
var curve_1 = require("./lines/curve");
var triangle_2 = require("./arrows/triangle");
var diamond_2 = require("./arrows/diamond");
var circle_2 = require("./arrows/circle");
var circle_anchor_1 = require("./nodes/circle.anchor");
var line_3 = require("./arrows/line");
var pentagon_1 = require("./nodes/pentagon");
var pentagon_rect_1 = require("./nodes/pentagon.rect");
var pentagon_anchor_1 = require("./nodes/pentagon.anchor");
var hexagon_1 = require("./nodes/hexagon");
var hexagon_anchor_1 = require("./nodes/hexagon.anchor");
var hexagon_rect_1 = require("./nodes/hexagon.rect");
var pentagram_1 = require("./nodes/pentagram");
var pentagram_anchor_1 = require("./nodes/pentagram.anchor");
var pentagram_rect_1 = require("./nodes/pentagram.rect");
var cloud_1 = require("./nodes/cloud");
var cloud_anchor_1 = require("./nodes/cloud.anchor");
var cloud_rect_1 = require("./nodes/cloud.rect");
var message_1 = require("./nodes/message");
var message_rect_1 = require("./nodes/message.rect");
var message_anchor_1 = require("./nodes/message.anchor");
var file_1 = require("./nodes/file");
var image_rect_1 = require("./nodes/image.rect");
var cube_1 = require("./nodes/cube");
var cube_anchor_1 = require("./nodes/cube.anchor");
var cube_rect_1 = require("./nodes/cube.rect");
var people_1 = require("./nodes/people");
var people_rect_1 = require("./nodes/people.rect");
var rectangle_rect_1 = require("./nodes/rectangle.rect");
// Functions of drawing a node.
exports.drawNodeFns = {};
// Calc the occupy rect of icon.
exports.iconRectFns = {};
// Calc the occupy rect of text.
exports.textRectFns = {};
// Calc the anchors of node.
exports.anchorsFns = {};
// Functions of drawing a line.
exports.drawLineFns = {};
// Functions of drawing a arrow.
exports.drawArrowFns = {};
function init() {
    console.log('Init middles.');
    // ********Default nodes.*******
    // Combine
    exports.drawNodeFns.combine = rectangle_1.rectangle;
    // Div
    exports.drawNodeFns.div = rectangle_1.rectangle;
    // Square
    exports.drawNodeFns.square = rectangle_1.rectangle;
    // Rectangle
    exports.drawNodeFns.rectangle = rectangle_1.rectangle;
    exports.iconRectFns.rectangle = rectangle_rect_1.rectangleIconRect;
    exports.textRectFns.rectangle = rectangle_rect_1.rectangleTextRect;
    // Ciricle
    exports.drawNodeFns.circle = circle_1.circle;
    exports.iconRectFns.circle = circle_rect_1.circleIconRect;
    exports.textRectFns.circle = circle_rect_1.circleTextRect;
    exports.anchorsFns.circle = circle_anchor_1.circleAnchors;
    // Triangle
    exports.drawNodeFns.triangle = triangle_1.triangle;
    exports.anchorsFns.triangle = triangle_anchor_1.triangleAnchors;
    exports.iconRectFns.triangle = triangle_rect_1.triangleIconRect;
    exports.textRectFns.triangle = triangle_rect_1.triangleTextRect;
    // Diamond
    exports.drawNodeFns.diamond = diamond_1.diamond;
    exports.iconRectFns.diamond = diamond_rect_1.diamondIconRect;
    exports.textRectFns.diamond = diamond_rect_1.diamondTextRect;
    // Hexagon
    exports.drawNodeFns.hexagon = hexagon_1.hexagon;
    exports.iconRectFns.hexagon = hexagon_rect_1.hexagonIconRect;
    exports.textRectFns.hexagon = hexagon_rect_1.hexagonTextRect;
    exports.anchorsFns.hexagon = hexagon_anchor_1.hexagonAnchors;
    // Pentagon
    exports.drawNodeFns.pentagon = pentagon_1.pentagon;
    exports.iconRectFns.pentagon = pentagon_rect_1.pentagonIconRect;
    exports.textRectFns.pentagon = pentagon_rect_1.pentagonTextRect;
    exports.anchorsFns.pentagon = pentagon_anchor_1.pentagonAnchors;
    // Pentagram
    exports.drawNodeFns.pentagram = pentagram_1.pentagram;
    exports.iconRectFns.pentagram = pentagram_rect_1.pentagramIconRect;
    exports.textRectFns.pentagram = pentagram_rect_1.pentagramTextRect;
    exports.anchorsFns.pentagram = pentagram_anchor_1.pentagramAnchors;
    // Left arrow
    exports.drawNodeFns.leftArrow = arrow_1.leftArrow;
    exports.anchorsFns.leftArrow = arrow_anchor_1.arrowAnchors;
    exports.iconRectFns.leftArrow = arrow_rect_1.leftArrowIconRect;
    exports.textRectFns.leftArrow = arrow_rect_1.leftArrowTextRect;
    // Right arrow
    exports.drawNodeFns.rightArrow = arrow_1.rightArrow;
    exports.anchorsFns.rightArrow = arrow_anchor_1.arrowAnchors;
    exports.iconRectFns.rightArrow = arrow_rect_1.rightArrowIconRect;
    exports.textRectFns.rightArrow = arrow_rect_1.rightArrowTextRect;
    // Two-way arrow
    exports.drawNodeFns.twowayArrow = arrow_1.twowayArrow;
    exports.anchorsFns.twowayArrow = arrow_anchor_1.arrowAnchors;
    exports.iconRectFns.twowayArrow = arrow_rect_1.twowayArrowIconRect;
    exports.textRectFns.twowayArrow = arrow_rect_1.twowayArrowTextRect;
    // Cloud
    exports.drawNodeFns.cloud = cloud_1.cloud;
    exports.anchorsFns.cloud = cloud_anchor_1.cloudAnchors;
    exports.iconRectFns.cloud = cloud_rect_1.cloudIconRect;
    exports.textRectFns.cloud = cloud_rect_1.cloudTextRect;
    // Message
    exports.drawNodeFns.message = message_1.message;
    exports.anchorsFns.message = message_anchor_1.messageAnchors;
    exports.iconRectFns.message = message_rect_1.messageIconRect;
    exports.textRectFns.message = message_rect_1.messageTextRect;
    // File
    exports.drawNodeFns.file = file_1.file;
    // Text
    exports.drawNodeFns.text = text_1.text;
    exports.iconRectFns.text = line_rect_1.lineIconRect;
    // Line
    exports.drawNodeFns.line = line_1.line;
    exports.anchorsFns.line = line_anchor_1.lineAnchors;
    exports.iconRectFns.line = line_rect_1.lineIconRect;
    exports.textRectFns.line = line_rect_1.lineTextRect;
    // Image
    exports.drawNodeFns.image = function (ctx, node) { };
    exports.iconRectFns.image = image_rect_1.imageIconRect;
    exports.textRectFns.image = image_rect_1.imageTextRect;
    // Cube
    exports.drawNodeFns.cube = cube_1.cube;
    exports.anchorsFns.cube = cube_anchor_1.cubeAnchors;
    exports.iconRectFns.cube = cube_rect_1.cubeIconRect;
    exports.textRectFns.cube = cube_rect_1.cubeTextRect;
    // Cube
    exports.drawNodeFns.people = people_1.people;
    exports.iconRectFns.people = people_rect_1.peopleIconRect;
    exports.textRectFns.people = people_rect_1.peopleTextRect;
    // ********end********
    // ********Default lines.*******
    exports.drawLineFns.line = {
        drawFn: line_2.line,
        drawControlPointsFn: line_2.lineControlPoints,
        controlPointsFn: line_2.calcLineControlPoints,
        pointIn: polyline_1.pointInPolyline
    };
    exports.drawLineFns.polyline = {
        drawFn: polyline_1.polyline,
        drawControlPointsFn: polyline_1.polylineControlPoints,
        controlPointsFn: polyline_1.calcPolylineControlPoints,
        dockControlPointFn: polyline_1.dockPolylineControlPoint,
        pointIn: polyline_1.pointInPolyline
    };
    exports.drawLineFns.curve = {
        drawFn: curve_1.curve,
        drawControlPointsFn: curve_1.curveControlPoints,
        controlPointsFn: curve_1.calcCurveControlPoints,
        pointIn: curve_1.pointInCurve
    };
    exports.drawLineFns.mind = {
        drawFn: curve_1.curve,
        drawControlPointsFn: curve_1.curveControlPoints,
        controlPointsFn: curve_1.calcMindControlPoints,
        pointIn: curve_1.pointInCurve
    };
    // ********end********
    // ********Default nodes.*******
    exports.drawArrowFns.triangleSolid = triangle_2.triangleSolid;
    exports.drawArrowFns.triangle = triangle_2.triangle;
    exports.drawArrowFns.diamondSolid = diamond_2.diamondSolid;
    exports.drawArrowFns.diamond = diamond_2.diamond;
    exports.drawArrowFns.circleSolid = circle_2.circleSolid;
    exports.drawArrowFns.circle = circle_2.circle;
    exports.drawArrowFns.line = line_3.line;
    exports.drawArrowFns.lineUp = line_3.lineUp;
    exports.drawArrowFns.lineDown = line_3.lineDown;
    // ********end********
}
init();
// registerNode: Register a custom node.
// name - The name of node.
// drawFn - How to draw.
// anchorsFn - How to get the anchors.
// iconRectFn - How to get the icon rect.
// textRectFn - How to get the text rect.
// force - Overwirte the node if exists.
function registerNode(name, drawFn, anchorsFn, iconRectFn, textRectFn, force) {
    // Exist
    if (exports.drawNodeFns[name] && !force) {
        return false;
    }
    exports.drawNodeFns[name] = drawFn;
    exports.anchorsFns[name] = anchorsFn;
    exports.iconRectFns[name] = iconRectFn;
    exports.textRectFns[name] = textRectFn;
    return true;
}
exports.registerNode = registerNode;
// registerLine: Register a custom line.
// name - The name of line.
// drawFn - How to draw.
// drawControlPointsFn - Draw the control points.
// controlPointsFn - How to get the controlPoints.
// dockControlPointFn - Dock a point to horizontal/vertial or related position.
// force - Overwirte the node if exists.
function registerLine(name, drawFn, drawControlPointsFn, controlPointsFn, dockControlPointFn, pointInFn, force) {
    // Exist
    if (exports.drawLineFns[name] && !force) {
        return false;
    }
    exports.drawLineFns[name] = {
        drawFn: drawFn,
        drawControlPointsFn: drawControlPointsFn,
        controlPointsFn: controlPointsFn,
        dockControlPointFn: dockControlPointFn,
        pointIn: pointInFn
    };
    return true;
}
exports.registerLine = registerLine;
// registerArrow: Register a custom arrow.
// name - the name of arrow.
// drawFn - how to draw.
// force - Overwirte the node if exists.
function registerArrow(name, drawFn, force) {
    // Exist
    if (exports.drawArrowFns[name] && !force) {
        return false;
    }
    exports.drawArrowFns[name] = drawFn;
    return true;
}
exports.registerArrow = registerArrow;
//# sourceMappingURL=index.js.map