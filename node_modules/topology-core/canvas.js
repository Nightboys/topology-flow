"use strict";
Object.defineProperty(exports, "__esModule", {
  value: true
});
var le5le_store_1 = require("le5le-store");
var Canvas = /** @class */ (function () {
  function Canvas(parentElem, options) {
    if (options === void 0) {
      options = {};
    }
    this.parentElem = parentElem;
    this.options = options;
    this.data = le5le_store_1.Store.get('topology-data');
    this.canvas = document.createElement('canvas');
    this.width = 0;
    this.height = 0;
    this.canvas.style.position = 'absolute';
    this.canvas.style.left = '0';
    this.canvas.style.top = '0';
    this.canvas.style.outline = 'none';
    if (!Canvas.dpiRatio) {
      if (!options.extDpiRatio && options.extDpiRatio !== 0) {
        if (window.devicePixelRatio > 1) {
          options.extDpiRatio = 0.25;
        } else {
          options.extDpiRatio = 0;
        }
      }
      Canvas.dpiRatio = window.devicePixelRatio + options.extDpiRatio;
    }

    // 用户自定义端口提示文字
    if (!document.getElementById('tipsPort')) {
      this.portTips = document.createElement('span');
      let tipsId = document.createAttribute("id"); //创建属性
      tipsId.value = 'tipsPort';
      this.portTips.setAttributeNode(tipsId); //给span添加属性
      this.parentElem.appendChild(this.portTips);
    }
  }
  Canvas.prototype.resize = function (size) {
    if (size) {
      this.width = size.width | 0;
      this.height = size.height | 0;
    } else {
      if (this.options.width && this.options.width !== 'auto') {
        this.width = +this.options.width;
      } else {
        this.width = this.parentElem.clientWidth;
      }
      if (this.options.height && this.options.height !== 'auto') {
        this.height = +this.options.height;
      } else {
        this.height = this.parentElem.clientHeight;
      }
    }
    this.canvas.style.width = this.width + 'px';
    this.canvas.style.height = this.height + 'px';
    this.canvas.width = (this.width * Canvas.dpiRatio) | 0;
    this.canvas.height = (this.height * Canvas.dpiRatio) | 0;
    this.canvas.getContext('2d').scale(Canvas.dpiRatio, Canvas.dpiRatio);
    le5le_store_1.Store.set('LT:size', {
      width: this.canvas.width,
      height: this.canvas.height
    });
  };
  Canvas.prototype.render = function () {
    var ctx = this.canvas.getContext('2d');
    ctx.clearRect(0, 0, this.canvas.width, this.canvas.height);
  };
  Canvas.prototype.getDpiRatio = function () {
    return Canvas.dpiRatio;
  };
  Canvas.dpiRatio = 0;
  return Canvas;
}());
exports.Canvas = Canvas;
//# sourceMappingURL=canvas.js.map
