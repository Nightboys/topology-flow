"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var le5le_store_1 = require("le5le-store");
var node_1 = require("./models/node");
var line_1 = require("./models/line");
var AnimateLayer = /** @class */ (function () {
    function AnimateLayer(options) {
        var _this = this;
        if (options === void 0) { options = {}; }
        this.options = options;
        this.data = le5le_store_1.Store.get('topology-data');
        this.pens = [];
        this.lastNow = 0;
        le5le_store_1.Store.set('LT:AnimateLayer', this);
        if (!this.options.animateColor) {
            this.options.animateColor = '#ff6600';
        }
        this.subscribeUpdate = le5le_store_1.Store.subscribe('LT:updateLines', function (lines) {
            _this.updateLines(lines);
        });
        this.subscribePlay = le5le_store_1.Store.subscribe('LT:AnimatePlay', function (params) {
            if (params.tag) {
                _this.readyPlay(params.tag, false);
            }
            else if (!_this.find(params.pen)) {
                params.pen.animateStart = Date.now();
                if (params.pen instanceof node_1.Node) {
                    params.pen.initAnimateProps();
                    _this.readyPens = [params.pen];
                }
                else {
                    _this.readyPens = [_this.getAnimateLine(params.pen)];
                }
            }
            _this.animate();
        });
    }
    AnimateLayer.prototype.find = function (pen) {
        for (var _i = 0, _a = this.pens; _i < _a.length; _i++) {
            var item = _a[_i];
            if (item.id === pen.id) {
                return item;
            }
        }
    };
    AnimateLayer.prototype.getAnimateLine = function (item) {
        var l = new line_1.Line(item);
        l.isAnimate = true;
        l.toArrow = '';
        if (l.fromArrow && l.fromArrow.indexOf('line') < 0) {
            l.animateFromSize = l.fromArrowSize + l.lineWidth * 5;
        }
        if (l.toArrow && l.toArrow.indexOf('line') < 0) {
            l.animateToSize = l.toArrowSize + l.lineWidth * 5;
        }
        l.animateStart = item.animateStart;
        l.lineCap = 'round';
        l.fillStyle = '#fff';
        l.strokeStyle = l.animateColor || this.options.animateColor;
        l.length = l.getLen();
        if (!l.fromArrowColor) {
            l.fromArrowColor = l.strokeStyle || '#222';
        }
        if (!l.toArrowColor) {
            l.toArrowColor = l.strokeStyle || '#222';
        }
        return l;
    };
    AnimateLayer.prototype.readyPlay = function (tag, auto, pens) {
        if (!pens) {
            pens = this.data.pens;
            this.readyPens = [];
        }
        for (var _i = 0, pens_1 = pens; _i < pens_1.length; _i++) {
            var item = pens_1[_i];
            if (item.animatePlay || (tag && item.tags.indexOf(tag) > -1)) {
                item.animateStart = Date.now();
            }
            if (item.animateStart > 0) {
                if (item instanceof node_1.Node) {
                    item.initAnimateProps();
                    this.readyPens.push(item);
                    if ((tag || auto) && item.children) {
                        this.readyPlay(tag, auto, item.children);
                    }
                }
                else {
                    this.readyPens.push(this.getAnimateLine(item));
                }
            }
            else if (item.animateStart === 0) {
                var pen = this.find(item);
                if (pen) {
                    pen.animateStart = 0;
                }
            }
        }
    };
    AnimateLayer.prototype.animate = function () {
        var _this = this;
        if (this.timer) {
            cancelAnimationFrame(this.timer);
        }
        if (this.readyPens) {
            for (var _i = 0, _a = this.readyPens; _i < _a.length; _i++) {
                var pen = _a[_i];
                var found = false;
                for (var _b = 0, _c = this.pens; _b < _c.length; _b++) {
                    var item = _c[_b];
                    if (pen.id === item.id) {
                        found = true;
                        break;
                    }
                }
                if (!found) {
                    this.pens.push(pen);
                }
            }
            this.readyPens = null;
        }
        this.timer = requestAnimationFrame(function () {
            var now = Date.now();
            if (now - _this.lastNow < 30) {
                _this.animate();
                return;
            }
            _this.lastNow = now;
            var animated = false;
            for (var i = 0; i < _this.pens.length; ++i) {
                if (_this.pens[i].animateStart < 1) {
                    _this.pens.splice(i, 1);
                    continue;
                }
                if (_this.pens[i].animateStart > now) {
                    continue;
                }
                var next = _this.pens[i].animate(now);
                if (next) {
                    _this.pens.splice(i, 1);
                    _this.readyPlay(next, false);
                }
                else if (_this.pens[i] && !_this.pens[i].animateStart) {
                    _this.pens.splice(i, 1);
                }
                animated = true;
            }
            if (animated) {
                le5le_store_1.Store.set('LT:render', true);
                _this.animate();
            }
        });
    };
    AnimateLayer.prototype.updateLines = function (lines) {
        for (var _i = 0, _a = this.pens; _i < _a.length; _i++) {
            var line = _a[_i];
            if (!(line instanceof line_1.Line)) {
                continue;
            }
            for (var _b = 0, lines_1 = lines; _b < lines_1.length; _b++) {
                var item = lines_1[_b];
                if (line.id === item.id) {
                    line.from = item.from;
                    line.to = item.to;
                    line.controlPoints = item.controlPoints;
                    line.length = line.getLen();
                }
            }
        }
    };
    AnimateLayer.prototype.render = function (ctx) {
        for (var _i = 0, _a = this.pens; _i < _a.length; _i++) {
            var item = _a[_i];
            if (item instanceof line_1.Line) {
                item.render(ctx);
            }
        }
    };
    AnimateLayer.prototype.stop = function () {
        if (this.timer) {
            cancelAnimationFrame(this.timer);
        }
    };
    AnimateLayer.prototype.destroy = function () {
        this.stop();
        this.subscribeUpdate.unsubscribe();
        this.subscribePlay.unsubscribe();
    };
    return AnimateLayer;
}());
exports.AnimateLayer = AnimateLayer;
//# sourceMappingURL=animateLayer.js.map